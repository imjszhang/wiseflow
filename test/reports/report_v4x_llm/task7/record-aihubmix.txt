focus statement: 
{'focuspoint': 'Spring AI', 'explanation': "I wander what's the relations with deepseek?"}

# raw materials: e077c6_processed.json
url: https://www.cnblogs.com/zlt2000/articles/18761832

## model: gpt-4.1-nano
time cost: 4.264188499888405s
tokens usage: 4096 (completion: 174, prompt: 3922)

### related urls: -1
https://mp.weixin.qq.com/s/Y4hRX5gmmGcSxc_YK0TAgw

### related infos: 
The main content discusses the integration of Spring AI with DeepSeek in building enterprise-level intelligent agents, specifically focusing on multi-language translation assistants. It highlights how Spring AI and DeepSeek models are combined to create a support system for multiple languages, emphasizing core capabilities such as instruction structuring, behavior boundary control, and dynamic template adaptation. The article also references the process of API-KEY application for Spring AI and DeepSeek integration, indicating a close relationship between the two technologies in developing intelligent agents.



## model: gemini-2.5-flash-preview-04-17-nothink
time cost: 2.5508690839633346s
tokens usage: 8722 (completion: 536, prompt: 8186)

### related urls: 
https://www.cnblogs.com/zlt2000/p/18654758
https://www.cnblogs.com/zlt2000/tag/Spring%20AI/
https://www.cnblogs.com/zlt2000/p/18824279
https://mp.weixin.qq.com/s/Y4hRX5gmmGcSxc_YK0TAgw
https://www.cnblogs.com/zlt2000/tag/springboot/
https://www.cnblogs.com/zlt2000/p/18801665
https://www.cnblogs.com/zlt2000/tag/deepseek/

### related infos: 
The article "Spring AI与DeepSeek实战二：打造企业级智能体" focuses on building an enterprise-level intelligent agent using Spring AI and the DeepSeek model. It demonstrates how to use Spring AI with DeepSeek to create a multilingual translation assistant, highlighting core capabilities like structured instructions, behavior boundary control, and dynamic template adaptation. The article mentions that the integration of Spring AI and DeepSeek, including API key application, is covered in a previous article titled "Spring AI与DeepSeek实战一：快速打造智能对话应用". The core code section shows how to use Spring AI's `PromptTemplate` with parameters for target language and content, which are then used to interact with the DeepSeek model for translation. The article also discusses the limitations of this approach for more complex tasks and suggests future directions involving task decomposition, workflow engines, and memory management, implying that Spring AI and DeepSeek could be part of these more advanced architectures.



## model: gpt-4.1-mini
time cost: 4.401920999865979s
tokens usage: 13126 (completion: 1018, prompt: 12108)

### related urls: 
https://www.cnblogs.com/zlt2000/tag/Spring%20AI/
https://www.cnblogs.com/zlt2000/p/18824279
https://mp.weixin.qq.com/s/Y4hRX5gmmGcSxc_YK0TAgw
https://www.cnblogs.com/zlt2000/tag/springboot/
https://www.cnblogs.com/zlt2000/p/18801665
https://www.cnblogs.com/zlt2000/tag/deepseek/

### related infos: 
本文以多语言翻译助手为场景，介绍了如何基于Spring AI与DeepSeek模型构建一个支持多种语言的企业级翻译智能体，实现企业级智能体的三大核心能力：指令结构化、行为边界控制与动态模板适配。智能体（Agent）能够自主执行任务，实现精准可控的跨语言交互，区别于传统依赖用户输入指令的AI，具备自主思考和多步操作能力。文章详细说明了系统Prompt设计，强调通过明确角色和行为边界、参数化语言配置（TARGET_LANG）、结构化输入（---translate_content---）以及拒绝策略保障服务安全。结合Spring AI的Prompt模板，实现动态Prompt生成和多语言动态适配。核心代码示例展示了如何通过接口调用实现翻译功能，支持多语言同时翻译。总结部分指出，虽然本文聚焦翻译场景封印了大模型对话能力，但现实复杂任务需要更高级能力如任务拆解、工作流引擎和记忆管理。关于Spring AI与DeepSeek的集成及API-KEY申请，文章推荐参考《Spring AI与DeepSeek实战一：快速打造智能对话应用》。从内容来看，Spring AI与DeepSeek是协同使用的，Spring AI作为框架或平台，DeepSeek作为模型，两者结合用于构建企业级智能体。

关于“Spring AI”与“DeepSeek”的关系，文章明确指出它们是集成使用的，Spring AI提供智能体构建的框架和Prompt模板支持，DeepSeek则是所用的模型之一，二者共同实现智能体的核心能力和多语言翻译功能。



## model: gpt-4o-mini
time cost: 2.265514791943133s
tokens usage: 17221 (completion: 1191, prompt: 16030)

### related urls: -1
https://mp.weixin.qq.com/s/Y4hRX5gmmGcSxc_YK0TAgw

### related infos: 
本文探讨了如何基于Spring AI与DeepSeek模型构建一个支持多种语言的企业级翻译智能体，强调了智能体的三大核心能力：指令结构化、行为边界控制与动态模板适配。文章中提到，智能体能够自主思考和决策，执行复杂任务，类似于一个AI助手。关于Spring AI与DeepSeek的集成及API-KEY的申请，读者可以参考前一篇文章《Spring AI与DeepSeek实战一：快速打造智能对话应用》。



## model: o4-mini
time cost: 26.715350084006786s
tokens usage: 22982 (completion: 3031, prompt: 19951)

### related urls: 
https://www.cnblogs.com/zlt2000/tag/Spring%20AI/
https://www.cnblogs.com/zlt2000/p/18824279
https://mp.weixin.qq.com/s/Y4hRX5gmmGcSxc_YK0TAgw
https://www.cnblogs.com/zlt2000/tag/springboot/
https://www.cnblogs.com/zlt2000/p/18801665
https://www.cnblogs.com/zlt2000/tag/deepseek/

### related infos: 
文章“Spring AI与DeepSeek实战二：打造企业级智能体”演示了如何基于Spring AI和DeepSeek模型构建一个多语言翻译企业级智能体，主要内容包括：
1. 利用Spring AI定义系统级Prompt，明确角色与行为边界，实现指令结构化与安全性控制。  
2. 通过Spring AI的PromptTemplate动态生成Prompt模板，使用占位符“TARGET_LANG”和“content”实现多语言适配。  
3. 在Spring Boot中暴露`/translate`接口（@GetMapping），将用户输入与目标语言参数传入Spring AI生成的Prompt，调用DeepSeek模型完成翻译。  
4. 展现了企业级智能体的三大核心能力：指令结构化、行为边界控制与动态模板适配。  
5. 文中引用了上一篇“Spring AI与DeepSeek实战一：快速打造智能对话应用”以获取Spring AI与DeepSeek集成及API-KEY申请的详细信息。



## model: o3-mini
time cost: 13.617553957970813s
tokens usage: 28949 (completion: 5077, prompt: 23872)

### related urls: 
https://www.cnblogs.com/zlt2000/tag/Spring%20AI/
https://mp.weixin.qq.com/s/Y4hRX5gmmGcSxc_YK0TAgw
https://www.cnblogs.com/zlt2000/tag/springboot/
https://www.cnblogs.com/zlt2000/p/18801665
https://www.cnblogs.com/zlt2000/tag/deepseek/

### related infos: 
The main-content focuses on an article titled “Spring AI与DeepSeek实战二：打造企业级智能体”, which demonstrates how to build an enterprise-level multi-language translation agent by integrating Spring AI with DeepSeek. The article explains that using Spring AI together with DeepSeek allows the construction of an intelligent agent that features structured instruction design, behavior boundary control, and dynamic template adaptation. It discusses key aspects such as setting a system-level prompt (defining the agent’s role and constraints), dynamic prompt template generation (using placeholders for target language and content), and provides core code examples (such as a Spring Boot controller method for translation). There is also a reference to an earlier article that covers the integration details and the process of applying for an API-KEY (“关于 Spring AI 与 DeepSeek 的集成，以及 API-KEY 的申请等内容，可参考文章《Spring AI与DeepSeek实战一：快速打造智能对话应用[29]》”). This clearly indicates that Spring AI is used in tandem with DeepSeek to empower the intelligent agent, addressing the query about their relationship.



# raw materials: b2d7f5_processed.json
url: https://www.cnblogs.com/yunqishequ/p/18209013

## model: gpt-4.1-nano
time cost: 2.298828999977559s
tokens usage: 34350 (completion: 5313, prompt: 29037)

### related urls: 
https://pic1.zhimg.com/80/v2-e18304409f47b64c19c1aef03d2fa22c_720w.webp

### related infos: 
Spring AI is a community project aimed at simplifying Java AI application development, providing support for large models like 通义千问 (Tongyi Qianwen) through Spring Cloud Alibaba AI, which is based on Spring AI. It offers features such as multi-model service integration, prompt templates, multi-modal generation, and API access to models and embeddings. The project is inspired by Python projects like LangChain and LlamaIndex, but is designed for Java developers. It enables rapid development of AI applications, including chat, image, and speech generation, using Spring Boot and Alibaba Cloud's model services. The framework supports integration with 阿里云灵积模型服务 (Lingji Model Service) for large model inference and fine-tuning, with examples and documentation provided for building applications like chatbots. The relation to DeepSeek is not explicitly mentioned in the main content.



## model: gemini-2.5-flash-preview-04-17-nothink
time cost: 6.810344291152433s
tokens usage: 41460 (completion: 6596, prompt: 34864)

### related urls: 
https://www.cnblogs.com/zlt2000/p/18654758
https://www.cnblogs.com/alisystemsoftware/p/18166296
https://www.cnblogs.com/xiezhr/p/18251683
https://www.cnblogs.com/yunqishequ/p/18209013

### related infos: 
Spring AI is a Spring official community project aimed at simplifying Java AI application development, allowing Java developers to develop AI applications similarly to how they develop regular Spring applications. It is inspired by Python projects like LangChain and LlamaIndex but is not a direct copy. Spring AI provides abstractions for developing Java AI applications, including capabilities for integrating with various large model services, flexible Prompt Template and Output Parsing, support for multimodal generative AI, a portable API for accessing model and Embedding services (supporting sync and streaming calls and custom parameters), and foundational components for RAG (DocumentLoader, TextSpillter, EmobeddingClient, VectorStore). It also supports AI Spring Boot Starter for auto-configuration. Spring Cloud Alibaba AI is built upon Spring AI and specifically provides comprehensive adaptation for Alibaba Cloud's Tongyi series large models, enabling users to develop Java AI applications based on Tongyi models quickly. The current version of Spring Cloud Alibaba AI is based on Spring AI 0.8.1 and integrates with Tongyi models through Alibaba Cloud's Lingji Model Service. The article provides a demo of developing an online chat AI application using `spring-cloud-starter-alibaba-ai` with Tongyi Qianwen as the underlying model service, demonstrating how to add dependencies, configure the API key, implement the chat service using `ChatClient` and `StreamingChatClient` injected by Spring AI, and run the application. The future plan for Spring Cloud Alibaba AI includes adding more adaptations for VectorStore, Embedding, and ETL Pipeline to simplify RAG and other AI application development scenarios.



## model: gpt-4.1-mini
time cost: 9.422213166952133s
tokens usage: 47654 (completion: 7625, prompt: 40029)

### related urls: 
https://pic1.zhimg.com/80/v2-e18304409f47b64c19c1aef03d2fa22c_720w.webp
https://www.cnblogs.com/yunqishequ/p/18209013

### related infos: 
Spring AI is a Spring official community project designed to simplify Java AI application development, enabling Java developers to build AI applications as easily as regular Spring applications. It provides abstractions for Java AI development, supporting multiple major large model services, flexible prompt templates, output parsing, multimodal generative AI capabilities (such as dialogue, text-to-image, and text-to-speech), and common AI components like DocumentLoader, TextSplitter, EmbeddingClient, and VectorStore. It also offers an AI Spring Boot Starter for automatic configuration.

Spring Cloud Alibaba AI builds on Spring AI (version 0.8.11) and integrates Alibaba Cloud's Tongyi series large models via the Lingji (灵积) Model Service, which follows a Model-as-a-Service (MaaS) approach. This integration allows developers to quickly create Java AI applications based on Tongyi large models within 5 minutes. Spring Cloud Alibaba AI currently supports generative models for dialogue, text-to-image, and text-to-speech, and provides utilities like OutputParser, Prompt Template, and Prompt Stuff for external data integration.

A practical example is provided for developing a chat AI application using spring-cloud-starter-alibaba-ai, which uses Tongyi Qianwen (通义千问) model services. The example includes dependency setup, configuration of API keys, service implementation with injected ChatClient and StreamingChatClient, and a Spring Boot application entry point. The development process closely resembles standard Spring Boot application development.

To use the Tongyi models, developers need to apply for an API key from Alibaba Cloud's DashScope Lingji Model Service. Future plans for Spring Cloud Alibaba AI include expanding support for VectorStore, Embedding, ETL Pipelines, and simplifying RAG (Retrieval-Augmented Generation) application development.

Regarding the relation to Deepseek, the markdown does not explicitly mention Deepseek or clarify any direct connection between Spring AI and Deepseek.



## model: gpt-4o-mini
time cost: 9.830612666904926s
tokens usage: 53584 (completion: 8390, prompt: 45194)

### related urls: 
https://www.doubao.com?channel=cnblogs&type=lunt&theme=bianc

### related infos: 
Spring AI is a project from the Spring official community aimed at simplifying Java AI application development, allowing Java developers to create AI applications as easily as they would regular Spring applications. It is built on the Spring Cloud Alibaba AI framework, which integrates with Alibaba's Tongyi series of large models, enabling users to develop Java AI applications in just five minutes. The project draws inspiration from popular Python projects like LangChain and LlamaIndex but is not a direct copy. Spring AI provides various functionalities, including support for multiple large model services, flexible prompt templates, multi-modal generative AI capabilities, and a portable API for accessing various model services. The Spring Cloud Alibaba AI framework is based on the Model-as-a-Service (MaaS) concept and includes several common generative model adaptations, such as chat, image generation, and voice generation applications.



## model: o4-mini
time cost: 21.70774770807475s
tokens usage: 60374 (completion: 10016, prompt: 50358)

### related urls: 
https://pic1.zhimg.com/80/v2-e18304409f47b64c19c1aef03d2fa22c_720w.webp
https://www.cnblogs.com/yunqishequ/p/18209013

### related infos: 
Spring AI is an official Spring community project designed to let Java developers build AI applications just as they would ordinary Spring apps. Inspired by Python frameworks like LangChain and LlamaIndex (but not a direct port), it provides:
  * Pluggable integration with mainstream large‐model services  
  * Flexible Prompt Templates and Output Parsing  
  * Multimodal generative AI (chat, text‐to‐image, text‐to‐speech)  
  * A portable API for model and embedding services, supporting both synchronous and streaming calls and custom model parameters  
  * RAG (Retrieval‐Augmented Generation) building blocks (DocumentLoader, TextSplitter, EmbeddingClient, VectorStore, etc.)  
  * An AI Spring Boot Starter for zero‐configuration setup  

Spring Cloud Alibaba AI builds on Spring AI (v0.8.11) to connect Alibaba’s Tongyi series models via the Lingji “Model-as-a-Service” platform, providing adapters for chat, image and speech generation, plus utilities like OutputParser, Prompt Templates, and “stuffing” external data into prompts.

The article walks through creating a simple online chat AI application using spring-cloud-starter-alibaba-ai, including Maven setup, application.yml configuration (with an API-KEY for Tongyi), service implementation, and running/validating the app.

No mention or relation to “deepseek” appears in the main content.



## model: o3-mini
time cost: 24.06004004110582s
tokens usage: 69215 (completion: 13693, prompt: 55522)

### related urls: 
https://www.doubao.com?channel=cnblogs&type=lunt&theme=bianc
https://pic1.zhimg.com/80/v2-e18304409f47b64c19c1aef03d2fa22c_720w.webp
https://www.cnblogs.com/yunqishequ/p/18209013

### related infos: 
Spring AI is a Spring official community project designed to simplify the development of Java AI applications. The main-content explains that using Spring AI, developers can integrate various large model services, employ flexible prompt templating and output parsing, and build multi‐modal generative AI capabilities (such as chat, image, and voice generation) in a manner similar to ordinary Spring Boot development. Notably, Spring Cloud Alibaba AI is built on top of Spring AI, extending its functionalities by fully adapting Alibaba’s Tongyi series of large models for rapid application development. Regarding the relation with deepseek, there is no mention or explicit connection to deepseek in the provided markdown.



# raw materials: 8a4763_processed.json
url: https://blog.csdn.net/gududedabai/article/details/139889333

## model: gpt-4.1-nano
time cost: 4.607263499870896s
tokens usage: 81330 (completion: 14016, prompt: 67314)

### related urls: 
https://wenku.csdn.net/answer/6mby4kxrr4

### related infos: 
The main content indicates that Spring AI is a project aimed at simplifying the integration of AI services within Spring applications. It is still in the incubation stage and provides abstractions for developing AI applications, supporting multiple AI service providers such as OpenAI, Azure OpenAI, Hugging Face, and Bedrock. Spring AI offers features like models, prompts, prompt templates, token management, output parsing, chaining calls, data integration, retrieval-augmented generation, and response evaluation. It is inspired by Python libraries like LangChain and LlamaIndex, and it emphasizes modularity, extensibility, and ease of switching components. The project also integrates with Spring ecosystem projects and provides Spring Boot Starters for quick setup. Additionally, there is a mention of how Spring AI relates to DeepSeek, suggesting that Spring AI can be used to integrate DeepSeek as an AI service provider, and that the project aims to make AI application development accessible across multiple programming languages, not just Python.



## model: gemini-2.5-flash-preview-04-17-nothink
time cost: 23.91878483304754s
tokens usage: 99003 (completion: 19769, prompt: 79234)

### related urls: -1
https://blog.csdn.net/bugyinyin/article/details/147850147
https://blog.csdn.net/gududedabai/category_12489546.html
https://blog.csdn.net/gududedabai/category_7755623.html
https://blog.csdn.net/gududedabai/article/details/139889333#t6
https://api.moonshot.cn/v1/chat/completions
https://csdnimg.cn/release/blogv2/dist/pc/img/toolbar/like.png
https://blog.csdn.net/yugongpeng
https://g.csdnimg.cn/common/csdn-footer/images/email.png
https://blog.csdn.net/gududedabai/article/details/139889333#t21
https://blog.csdn.net/gududedabai/category_7789939.html
https://blog.csdn.net/2201_75535220/article/details/148132491
https://blog.csdn.net/FL1623863129/article/details/148027457
https://blog.csdn.net/gududedabai?type=blog&year=2017&month=12
https://i.csdn.net/#/wallet/balance/recharge?utm_source=RewardVip
https://so.csdn.net/so/search/s.do?q=spring+boot&t=all&o=vip&from_tracking_code=tag_word&from_code=app_blog_art
https://blog.csdn.net/gududedabai/article/details/139889333#4.1%E3%80%81%E6%A8%A1%E5%9E%8B%EF%BC%88Models%EF%BC%89
http://creativecommons.org/licenses/by-sa/4.0/
https://github.com/jmorganca/ollama/blob/main/docs/api.md
https://blog.csdn.net/weixin_54925172
https://blog.csdn.net/gududedabai/category_12489544.html
https://blog.csdn.net/gududedabai/category_7755615.html
https://blog.csdn.net/gududedabai/category_7028396.html
https://blog.csdn.net/blogdevteam/article/details/90369522
https://blog.csdn.net/gududedabai/article/details/139889333#commentBox
https://blog.csdn.net/gududedabai/category_8126109.html
https://blog.csdn.net/gududedabai/article/details/139889333
https://csdnimg.cn/release/blogv2/dist/pc/img/tobarThumbUpactive.png
https://blog.csdn.net/gududedabai/category_7028412.html
https://blog.csdn.net/jennycisp/article/details/147850118
https://csdnimg.cn/release/live_fe/culture_license.png
https://blog.csdn.net/gududedabai/article/details/139889333#4.8%E3%80%81%E6%A3%80%E7%B4%A2%E5%A2%9E%E5%BC%BA%E7%94%9F%E6%88%90
https://blog.csdn.net/gududedabai/category_7755620.html
https://fsc-p05.txscrm.com/T8PN8SFII7W
https://blog.csdn.net/FL1623863129
https://g.csdnimg.cn/common/csdn-footer/images/tel.png
https://blog.csdn.net/gududedabai/article/details/82377874
https://cyberpolice.mps.gov.cn/
https://blog.csdn.net/gududedabai/article/details/139889333#4.3%E3%80%81%E6%8F%90%E7%A4%BA%E6%A8%A1%E6%9D%BF%EF%BC%88Prompt%20Templates%EF%BC%89
https://blog.csdn.net/gududedabai/article/details/139889333#t7
https://csdn.net
https://so.csdn.net/so/search/s.do?q=gpt&t=all&o=vip&from_tracking_code=tag_word&from_code=app_blog_art
https://csdnimg.cn/release/blogv2/dist/pc/img/commentArrowDownWhite.png
https://blog.csdn.net/gududedabai/article/details/140026764
https://blog.csdn.net/gududedabai/category_10154232.html
https://blog.csdn.net/gududedabai/category_7028408.html
https://blog.csdn.net/richar0725/article/details/148132303
https://csdnimg.cn/release/blogv2/dist/pc/img/pay-time-out.png
https://blog.csdn.net/gududedabai/category_7755617.html
https://blog.csdn.net/liupeng9494/article/details/147903013
https://blog.csdn.net/weixin_50822640
https://blog.csdn.net/gududedabai?type=blog&year=2023&month=11
https://blog.csdn.net/gududedabai/category_7752853.html
https://blog.csdn.net/weixin_42417531/article/details/145580913
https://blog.csdn.net/weixin_54925172/article/details/144150724
https://blog.csdn.net/gududedabai/article/details/139907507
https://csdnimg.cn/release/blogv2/dist/pc/img/commentArrowLeftWhite.png
https://blog.csdn.net/hellochenlian/article/details/140904882
https://blog.csdn.net/gududedabai/article/details/139889333#t9
https://ai.csdn.net?spm=1001.2101.3001.10583
https://blog.csdn.net/gududedabai/article/details/139889333#%E4%B8%89%E3%80%81sprig%20AI%20%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F
https://blog.csdn.net/gududedabai/article/details/109264178#comments_27757050
https://blog.csdn.net/gududedabai?type=blog&year=2018&month=12
https://blog.csdn.net/gududedabai/article/details/139899558?csdn_share_tail=%7B%22type%22%3A%22blog%22%2C%22rType%22%3A%22article%22%2C%22rId%22%3A%22139899558%22%2C%22source%22%3A%22gududedabai%22%7D
https://blog.csdn.net/gududedabai/article/details/139889333#t1
https://blog.csdn.net/chainso23
https://platform.openai.com/signup
https://blog.csdn.net/u011046509/article/details/138289032
https://csdnimg.cn/release/blogv2/dist/pc/img/newWeiXin.png
https://i-blog.csdnimg.cn/blog_migrate/e1e9757c25bba2fe85c2fb035abbdd32.png
https://www.csdn.net/company/index.html#recruit
https://blog.csdn.net/gududedabai/article/details/139889333#%E4%BA%94%E3%80%81spring%20AI%E5%BA%94%E7%94%A8
https://g.csdnimg.cn/side-toolbar/3.6/images/mobile.png
https://blog.csdn.net/gududedabai/article/details/139889333#4.4%E3%80%81%E4%BB%A4%20%E7%89%8C%EF%BC%88Tokens%EF%BC%89
https://im.csdn.net/chat/gududedabai
https://blog.csdn.net/gududedabai/category_7028378.html
https://blog.csdn.net/universsky2015/category_9462993.html
https://csdnimg.cn/release/blogv2/dist/pc/img/weixin.png
https://blog.csdn.net/gududedabai/category_7758132.html
https://blog.csdn.net/qq_25137131
https://blog.csdn.net/liujianming90/article/details/137561189
https://g.csdnimg.cn/common/csdn-footer/images/badge.png
https://blog.csdn.net/m0_73844172
https://csdnimg.cn/identity/blog6.png
https://blog.csdn.net/qq_41481367
https://blog.csdn.net/gududedabai/category_7028375.html
https://csdn.s2.udesk.cn/im_client/?web_plugin_id=29181
https://blog.csdn.net/community_717
https://blog.csdn.net/gududedabai/article/details/139889333#t17
https://doker.blog.csdn.net/article/details/143954313
https://csdnimg.cn/release/blogv2/dist/pc/img/newZhiFuBao.png
https://csdnimg.cn/release/blogv2/dist/pc/img/zhifubao.png
https://blog.csdn.net/m0_72803988
https://blog.csdn.net/gududedabai/article/details/80002088
https://blog.csdn.net/gududedabai/category_8113101.html
https://blog.csdn.net/gududedabai/category_8654903.html
https://blog.csdn.net/liujianming90
https://blog.csdn.net/gududedabai/category_7755608.html
https://blog.csdn.net/zj_203240104/article/details/148014691
https://blog.csdn.net/blogdevteam/article/details/126135357
https://blog.csdn.net/gududedabai?type=blog&year=2020&month=10
https://blog.csdn.net/gududedabai/article/details/139889333#t4
https://blog.csdn.net/gududedabai/category_7823200.html
https://g.csdnimg.cn/common/csdn-footer/images/cs.png
https://blog.csdn.net/gududedabai/category_12110511.html
https://blog.csdn.net/gududedabai/article/details/140894507
https://blog.csdn.net/gududedabai/category_7823362.html
https://blog.csdn.net/gududedabai/article/details/139889333#t0
https://csdnimg.cn/release/blogv2/dist/pc/img/share/icon-wechat.png
https://blog.csdn.net/okok__TXF/article/details/148048935
https://blogdev.blog.csdn.net/article/details/122245662
https://blog.csdn.net/gududedabai/article/details/139889333#5.1.2%E3%80%81Azure%20OpenAI
https://img-home.csdnimg.cn/images/20250103023206.png
https://devpress.csdn.net/v1/article/detail/136287122
http://www.beian.gov.cn/portal/registerSystemInfo?recordcode=11010502030143
https://blog.csdn.net/gududedabai/category_7397555.html
https://blog.csdn.net/gududedabai/article/details/139889333#t10
https://blog.csdn.net/gududedabai/article/details/139889333#t11
https://blog.csdn.net/gududedabai/category_7028384.html
https://blog.csdn.net/gududedabai/category_8109804.html
https://blog.csdn.net/gududedabai/category_12708719.html
https://blog.csdn.net/gududedabai/article/details/139889333#5.1%E3%80%81%E9%85%8D%E7%BD%AE
https://portal.azure.com/
https://csdnimg.cn/release/blogv2/dist/pc/img/closeBlack.png
https://blog.csdn.net/weixin_51374429
https://blog.csdn.net/gududedabai/category_9360434.html
https://blog.csdn.net/gududedabai/category_7839172.html
https://g.csdnimg.cn/side-toolbar/3.6/images/qr_app.png
https://blog.csdn.net/yugongpeng/article/details/139650427
https://blog.csdn.net/gududedabai/category_7755622.html
https://blog.csdn.net/gududedabai/article/details/139889333#t2
https://csdnimg.cn/release/blogv2/dist/pc/img/tobarCollectionActive2.png
https://g.csdnimg.cn/side-toolbar/3.6/images/customer.png
https://blog.csdn.net/gududedabai/article/details/100660916#comments_28297515
https://blog.csdn.net/gududedabai/article/details/139889333#t3
http://beian.miit.gov.cn/publish/query/indexFirst.action
https://blog.csdn.net/gududedabai/article/details/92383146#comments_34069246
https://blog.csdn.net/gududedabai/category_7800985.html
https://blog.csdn.net/gududedabai/article/details/140026764#comments_33600228
https://blog.csdn.net/gududedabai/article/details/139889333#t24
https://csdnimg.cn/release/blogv2/dist/pc/img/pay-help.png
https://blog.csdn.net/gududedabai/category_7798538.html
https://devpress.csdn.net/v1/article/detail/134293973
https://download.csdn.net/tutelage/home
https://g.csdnimg.cn/side-toolbar/3.6/images/totop.png
https://blog.csdn.net/weixin_51374429/article/details/148047066
https://blog.csdn.net/gududedabai/article/details/80756480
https://blog.csdn.net/c19344881x/category_12958964.html
https://so.csdn.net/so/search/s.do?q=chatgpt&t=all&o=vip&from_tracking_code=tag_word&from_code=app_blog_art
https://blog.csdn.net/m0_74337424/article/details/148132705
https://blog.csdn.net/gududedabai/article/details/139889333#%E4%B8%80%E3%80%81spring%20AI%20%E7%9B%AE%E7%9A%84
https://blog.csdn.net/qq_69831828/article/details/147891675
https://blog.csdn.net/gududedabai/category_9341903.html
https://blog.csdn.net/gududedabai/article/details/139889333#4.5%E3%80%81%E8%BE%93%E5%87%BA%E8%A7%A3%E6%9E%90%EF%BC%88Output%20Parsing%EF%BC%89
https://blog.csdn.net/chainso23/article/details/148049245
https://marketing.csdn.net/questions/Q2202181748074189855
https://blog.csdn.net/hdc012345
https://edu.csdn.net/skill/java
https://csdnimg.cn/release/blogv2/dist/pc/img/guideRedReward03.png
https://blog.csdn.net/gududedabai/category_7028415.html
https://blog.csdn.net/gududedabai/article/details/139889333#t13
https://bbs.csdn.net/forums/FreeZone
https://blog.csdn.net/gududedabai/category_7919409.html
https://blog.csdn.net/gududedabai?type=blog&year=2019&month=12
https://mall.csdn.net/vip
https://blog.csdn.net/gududedabai/article/details/139889333#t15
https://csdnimg.cn/release/blogv2/dist/pc/img/jingdong.png
https://csdnimg.cn/cdn/content-toolbar/csdn-ICP.png
https://so.csdn.net/so/search/s.do?q=spring+cloud&t=all&o=vip&from_tracking_code=tag_word&from_code=app_blog_art
https://blog.csdn.net/gududedabai/article/details/81675736
https://blog.csdn.net/gududedabai/category_8227659.html
https://csdnimg.cn/release/blogv2/dist/pc/img/guideRedReward02.png
https://wenku.csdn.net/doc/4sgo6viuka
https://chrome.google.com/webstore/detail/csdn%E5%BC%80%E5%8F%91%E8%80%85%E5%8A%A9%E6%89%8B/kfkdboecolemdjodhmhmcibjocfopejo?hl=zh-CN
https://blog.csdn.net/gududedabai/category_7823732.html
https://blog.csdn.net/gududedabai/category_7028409.html
https://blog.csdn.net/gududedabai?type=blog&year=2024&month=08
https://blog.csdn.net/2505_90729871/article/details/147874120
https://blog.csdn.net/qq_25137131/article/details/139561016
https://blog.csdn.net/gududedabai?type=blog&year=2022&month=11
https://blog.csdn.net/gududedabai/article/details/109264178
https://blog.csdn.net/gududedabai/article/details/139889333#t23
https://blog.csdn.net/2401_85327249/article/details/147950481
https://blog.csdn.net/gududedabai/article/details/139889333#t25
https://blog.csdn.net/gududedabai/category_7028416.html
https://blog.csdn.net/gududedabai/article/details/139889333#5.1.1%E3%80%81OpenAI
https://blog.csdn.net/qq_58299462/article/details/148033749
https://csdnimg.cn/release/blogv2/dist/pc/img/newUpTime2.png
http://www.12377.cn/
https://platform.openai.com/account/api-keys
https://blog.csdn.net/gududedabai/category_9668039.html
https://blog.csdn.net/leesinbad
https://blog.csdn.net/gududedabai/category_12708765.html
https://blog.csdn.net/gududedabai/article/details/105540718
https://blog.csdn.net/u011046509
https://www.csdn.net/company/index.html#about
https://img-home.csdnimg.cn/images/20250103023201.png
https://csdnimg.cn/release/blogv2/dist/pc/img/closeBt.png
https://blog.csdn.net/gududedabai/article/details/139889333#4.7%E3%80%81%E5%B0%86%E6%95%B0%E6%8D%AE%E5%BC%95%E5%85%A5%20AI%20%E6%A8%A1%E5%9E%8B
https://blog.csdn.net/hellochenlian
https://mpbeta.csdn.net/edit
https://img-home.csdnimg.cn/images/20210412060958.png
https://blog.csdn.net/gududedabai/category_9464335.html
https://blog.csdn.net/gududedabai/category_8023443.html
https://blog.csdn.net/gududedabai/category_12112808.html
https://csdnimg.cn/release/blogv2/dist/pc/img/arrowup-line-bot-White.png
https://blog.csdn.net/qq_35029061/category_9856891.html
https://blog.csdn.net/gududedabai/article/details/139889333#%E4%BA%8C%E3%80%81spring%20AI%20%E6%9D%A5%E6%BA%90
https://www.csdn.net/company/index.html#statement
https://csdnimg.cn/release/blogv2/dist/pc/img/articleReadEyes2.png
https://blog.csdn.net/qq_38196449/article/details/147963463
https://blog.csdn.net/gududedabai/article/details/92383146
https://csdnimg.cn/release/blogv2/dist/pc/img/collectionCloseWhite.png
https://csdnimg.cn/release/blogv2/dist/pc/img/guideRedReward01.png
https://blog.csdn.net/gududedabai/article/details/139889333#t5
https://blog.csdn.net/gududedabai/category_12110513.html
https://blog.csdn.net/gududedabai/category_7823367.html
https://blog.csdn.net/gududedabai/category_8649464.html
https://so.csdn.net/so/search/s.do?q=%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD&t=all&o=vip&from_tracking_code=tag_word&from_code=app_blog_art
https://blog.csdn.net/gududedabai/category_8341437.html
https://blog.csdn.net/gududedabai/article/details/78637186
https://csdnimg.cn/release/blogv2/dist/pc/img/toolbar/reward.png
https://blog.csdn.net/gududedabai/article/details/139889333#4.9%E3%80%81%E8%AF%84%E4%BC%B0%20AI%20%E5%93%8D%E5%BA%94
http://www.bjjubao.org/
https://blog.csdn.net/gududedabai/category_7028390.html
https://blog.csdn.net/gududedabai/article/details/139889333#%E5%9B%9B%E3%80%81spring%20AI%E4%B8%AD%E7%9A%84%20%E6%A6%82%E5%BF%B5
https://blog.csdn.net/gududedabai/article/details/139889333#t19
https://so.csdn.net/so/search/s.do?q=AI%E7%BC%96%E7%A8%8B&t=all&o=vip&from_tracking_code=tag_word&from_code=app_blog_art
https://blog.csdn.net/gududedabai/article/details/83352106#comments_35618799
https://i.csdn.net/#/wallet/balance/recharge
https://blog.csdn.net/gududedabai
https://blog.csdn.net/weixin_42417531
https://gitee.com/mirrors/ollama/blob/main/docs/api.md
https://blog.csdn.net/gududedabai/article/details/139889333#4.2%E3%80%81%E6%8F%90%E7%A4%BA%EF%BC%88Prompts%EF%BC%89
https://blog.csdn.net/gududedabai/category_12362629.html
https://blog.csdn.net/gududedabai/article/details/139889333#5.1.3%E3%80%81Ollama
https://blog.csdn.net/2501_91490244/article/details/147838372
https://csdnimg.cn/release/blogv2/dist/pc/img/tobarCollect2.png
https://csdnimg.cn/release/blogv2/dist/pc/img/toolbar/like-active.png
https://blog.csdn.net/gududedabai/article/details/139889333#5.1.4%E3%80%81HuggingFace
https://blog.csdn.net/gududedabai/article/details/139889333#4.6%E3%80%81%E9%93%BE%E6%8E%A5%E8%B0%83%E7%94%A8%EF%BC%88Chaining%20Calls%EF%BC%89
https://wenku.csdn.net/answer/6mby4kxrr4
https://blog.csdn.net/gududedabai/category_7933575.html

### related infos: 
The Spring AI project aims to simplify the development of applications with AI capabilities without unnecessary complexity. It is an experimental project using general Spring framework concepts to create AI applications, integrating Azure OpenAI and OpenAI as backends for tasks like content generation, code generation, semantic search, and summarization. Historically, Python was common for accessing AI algorithms, but generative AI like OpenAI's ChatGPT makes HTTP access to pre-trained models easier, allowing languages like Java to interact with AI algorithms more readily. Spring AI provides an abstraction layer, inspired by Python libraries LangChain and LlamaIndex, to simplify switching between different Java client APIs for AI solutions. It follows Spring design values like modularity, extensibility, and data source integration. Key features include a universal API for AI model integration, prompt templates, support for chaining calls, output parsing, learning conversation styles, and evaluating AI responses. The project is not a direct port of LangChain or LlamaIndex but believes generative AI applications will be widespread across many programming languages. Spring AI provides core abstractions like the AiClient interface with implementations for OpenAI and Azure OpenAI, allowing easy component swapping. It also aims for higher-level functionalities for common use cases like "question answering on documents" or "chatting with documents," integrating with other Spring ecosystem projects as complexity increases. Spring Boot Starters and the Spring CLI are available to simplify setup and adding AI features. Spring AI initially focuses on models processing language input and providing language output, starting with OpenAI + Azure OpenAI, and supports embeddings for advanced use cases. It helps with strategies to handle token limits, such as chunking data. The project currently offers basic examples for evaluating responses in JUnit tests. The article mentions integrating DeepSeek with the Spring AI framework, noting that Spring AI is potentially still in the incubation stage and aims to simplify integrating AI services into Spring applications. It highlights the need to confirm user understanding of basic Spring AI usage (dependencies, API keys) and DeepSeek as an AI service provider.



## model: gpt-4.1-mini
time cost: 10.30258350004442s
tokens usage: 111833 (completion: 20807, prompt: 91026)

### related urls: -1
https://gitee.com/mirrors/ollama/blob/main/docs/api.md
https://portal.azure.com/
https://blog.csdn.net/gududedabai/article/details/139889333
https://platform.openai.com/signup
https://platform.openai.com/account/api-keys
https://wenku.csdn.net/answer/6mby4kxrr4
https://huggingface.co/spaces
https://github.com/jmorganca/ollama/blob/main/docs/api.md

### related infos: 
Spring AI is an experimental project designed to simplify the development of AI-enabled applications within the Spring framework without unnecessary complexity. It integrates Azure OpenAI and OpenAI as backends, supporting use cases such as content generation, code generation, semantic search, and summarization. Inspired by Python libraries LangChain and LlamaIndex, Spring AI provides an abstraction layer over various Java client APIs for AI services, facilitating easier switching between different AI backends. It adheres to Spring's design principles like modularity, extensibility, and data source integration.

Spring AI is not a direct port of LangChain or LlamaIndex but draws inspiration from them, aiming to make generative AI applications accessible beyond Python developers to many programming languages. Its core is a set of abstractions (e.g., AiClient interface) that allow minimal code changes to swap implementations such as OpenAI and Azure OpenAI. It also offers higher-level features for common use cases like document Q&A and chat, with plans to integrate with other Spring ecosystem projects (Spring Integration, Spring Batch, Spring Data). Spring Boot Starters and Spring CLI commands facilitate quick setup and adding AI capabilities.

Key concepts in Spring AI include models (initially focusing on language input/output models like OpenAI), prompts (complex, role-based inputs guiding AI output), prompt templates (text templates with placeholders rendered for AI input), tokens (the basic units of AI model input/output with cost and context window implications), output parsing (transforming AI string outputs into usable data structures), chaining calls (linking multiple AI calls for complex workflows), data injection into AI models (via fine-tuning or prompt filling), retrieval-augmented generation (RAG) using vector databases for integrating external data, and AI response evaluation (assessing output quality and relevance).

Spring AI supports multiple AI backends with configuration examples for OpenAI, Azure OpenAI, Ollama (a local LLM runner for macOS/Linux), and HuggingFace. It provides dependencies and environment variable setups for API keys and endpoints.

Regarding the relation to DeepSeek, the markdown mentions a separate article titled "使用 springai 框架 集成 deepseek" (Using SpringAI framework to integrate DeepSeek), indicating that DeepSeek is an AI service provider that can be integrated into Spring AI projects. However, detailed technical relations or integration specifics are not elaborated in the main content. The mention suggests that Spring AI can be extended or used alongside other AI service providers like DeepSeek, but Spring AI itself is primarily focused on providing a unified abstraction and integration layer for AI services within the Spring ecosystem.

In summary, Spring AI is a Java/Spring-centric AI application framework inspired by Python AI tooling, designed to abstract and simplify AI model integration, support multiple backends, and enable advanced AI use cases with modular, extensible components. It can potentially integrate with AI providers like DeepSeek, though the exact relationship is through integration rather than direct development lineage.



## model: gpt-4o-mini
time cost: 7.993641541106626s
tokens usage: 123957 (completion: 21139, prompt: 102818)

### related urls: 
https://wenku.csdn.net/answer/6mby4kxrr4
https://blog.csdn.net/2401_85327249/article/details/147950481
https://csdnimg.cn/release/blogv2/dist/pc/img/original.png

### related infos: 
Spring AI is an experimental project aimed at simplifying the development of AI applications using the Spring framework. It integrates with Azure OpenAI and OpenAI as backends, supporting various use cases such as content generation, code generation, semantic search, and summarization. The project draws inspiration from Python libraries like LangChain and LlamaIndex, providing an abstraction layer to facilitate easier switching between different Java client APIs for AI solutions. The core of Spring AI includes features like AiClient interfaces for OpenAI and Azure, prompt templates for interaction with AI models, and capabilities for output parsing and chaining calls. The project also emphasizes the importance of effective prompt engineering, which has become a distinct discipline in AI development.



## model: o4-mini
time cost: 42.1083660419099s
tokens usage: 137961 (completion: 23352, prompt: 114609)

### related urls: 
https://wenku.csdn.net/answer/6mby4kxrr4
https://blog.csdn.net/2401_85327249/article/details/147950481

### related infos: 
Spring AI is an experimental Spring-framework project that provides a unified, high-level abstraction layer for building AI applications in Java. Inspired by Python projects like LangChain and LlamaIndex—but not a direct port—it introduces core abstractions (e.g. the AiClient interface with OpenAI and Azure OpenAI implementations) that you can swap out with minimal code changes. Beyond simple model integration, Spring AI offers out-of-the-box support for common use cases such as document Q&A or “chatting” over documents, and it integrates with other Spring projects (Spring Integration, Spring Batch, Spring Data). To help you get started, it provides Spring Boot Starters, sample applications, and Spring CLI commands:
• spring boot new ai  
• spring boot add ai  

Key concepts in Spring AI include:
• Models: Pretrained language models (initially OpenAI/Azure OpenAI) and support for embeddings.  
• Prompts: Multi-role, language-based inputs guiding model output; “prompt engineering” is treated as both art and science.  
• Prompt Templates: Text-template engine (StringTemplate) for parameterizing prompts.  
• Tokens: The building blocks of model input/output, directly tied to usage cost and context-window limits.  
• Output Parsing: Techniques (and OpenAI Functions) for turning raw model strings into structured data (JSON, CSV).  
• Chaining Calls: Pipelines of model invocations where one call’s output feeds the next.  
• Data Ingestion: “Prompt filling” and (optionally) fine-tuning to bring external data into a model’s context.  
• Retrieval-Augmented Generation (RAG): An ETL-style pipeline feeding vector-indexed document chunks to models, with abstractions for DocumentReader, DocumentTransformer, DocumentWriter, Embedding.  
• Response Evaluation: Embedding basic JUnit-style tests that prompt the model to self-evaluate its answers.  

Configuration modules cover:
– OpenAI: set spring.ai.openai.api-key (e.g. via export SPRING_AI_OPENAI_API_KEY)  
– Azure OpenAI: set spring.ai.azure.openai.api-key and spring.ai.azure.openai.endpoint (via the corresponding environment variables)  
– Ollama: local Llama-based models with the org.springframework.ai:spring-ai-ollama:0.8.0-SNAPSHOT dependency  
– HuggingFace: set HUGGINGFACE_API_KEY and inference endpoint URL; include org.springframework.ai:spring-ai-huggingface:0.8.0-SNAPSHOT



## model: o3-mini
time cost: 32.51179733290337s
tokens usage: 154588 (completion: 28188, prompt: 126400)

### related urls: -1
https://docs._spring_.io/_spring_
https://blog.csdn.net/weixin_42417531/article/details/145580913
https://blog.csdn.net/qq_25137131/article/details/139561016
https://blog.csdn.net/2401_85327249/article/details/147950481
https://doker.blog.csdn.net/article/details/143954313
https://devpress.csdn.net/v1/article/detail/134293973
https://wenku.csdn.net/answer/6mby4kxrr4

### related infos: 
Spring AI is a project designed to simplify the development of AI‐enabled applications within the Spring ecosystem. Inspired by popular Python libraries such as LangChain and LlamaIndex, it is not a direct port but instead provides a set of core abstractions that allow developers to build AI applications with interchangeable components. Its design supports backend integrations with providers like OpenAI and Azure OpenAI via a common interface (for example, the AiClient interface), and it offers higher‐level functionalities for common use cases (such as document Q&A and conversational interactions). In addition, Spring AI is built to integrate seamlessly with other Spring projects (e.g. Spring Integration, Spring Batch, and Spring Data), while easing setup through Spring Boot Starters, accompanying sample applications, and a Spring CLI project. Although the main-content does not explicitly elaborate on a connection with DeepSeek, several links in the markdown refer to using the Spring AI framework in contexts that involve DeepSeek integration.



